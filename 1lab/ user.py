import socket
import re

def wait_for_trigger():
    """–û–∂–∏–¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 3001"""
    host = '127.0.0.1'
    port = 3001

    print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É (–ø–æ—Ä—Ç 3001)...")
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as trigger_sock:
            trigger_sock.connect((host, port))
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...")
            data = trigger_sock.recv(1024)
            if data == b"download":
                print("üì• –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É JSON")
                download_json()
            else:
                print("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª:", data)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–∞:", e)

def download_json():
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∏ –ø–æ–ª—É—á–∞–µ—Ç JSON-—Ñ–∞–π–ª —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
    host = '127.0.0.1'
    port = 2001
    request = "GET /download_json HTTP/1.1\r\nHost: 127.0.0.1\r\n\r\n"

    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
            sock.connect((host, port))
            sock.sendall(request.encode('utf-8'))

            received_data = b""
            chunk_count = 0

            while True:
                chunk = sock.recv(4096)
                if not chunk:
                    break
                chunk_count += 1
                received_data += chunk

        header_end = received_data.find(b"\r\n\r\n")
        if header_end == -1:
            print("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π HTTP-–æ—Ç–≤–µ—Ç (–Ω–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)")
            return

        headers = received_data[:header_end].decode('utf-8', errors='ignore')
        body = received_data[header_end + 4:]

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        match = re.search(r'filename="([^"]+)"', headers)
        filename = match.group(1) if match else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ (–Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü)
        valid_start = body.strip().startswith(b"{")
        valid_end = body.strip().endswith(b"}")

        print("üßæ –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª:", filename)
        print("üì¶ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:", len(body), "–±–∞–π—Ç")
        print("üì∂ –ü–∞–∫–µ—Ç–æ–≤ (recv):", chunk_count)

        if valid_start and valid_end:
            print("‚úÖ JSON –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ (–Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü)")
        else:
            print("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞")

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ JSON:", e)

if __name__ == "__main__":
    wait_for_trigger()
